<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1061.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1061.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.22%)</title><rect x="0.0000%" y="997" width="0.2244%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="1007.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (22 samples, 0.22%)</title><rect x="0.0000%" y="981" width="0.2244%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="991.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (22 samples, 0.22%)</title><rect x="0.0000%" y="965" width="0.2244%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="975.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (22 samples, 0.22%)</title><rect x="0.0000%" y="949" width="0.2244%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="959.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (22 samples, 0.22%)</title><rect x="0.0000%" y="933" width="0.2244%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="943.50"></text></g><g><title>bai_finch::fancy_f::{{closure}} (22 samples, 0.22%)</title><rect x="0.0000%" y="917" width="0.2244%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="927.50"></text></g><g><title>bai_finch::zeta (22 samples, 0.22%)</title><rect x="0.0000%" y="901" width="0.2244%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (22 samples, 0.22%)</title><rect x="0.0000%" y="885" width="0.2244%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="895.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (22 samples, 0.22%)</title><rect x="0.0000%" y="869" width="0.2244%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.22%)</title><rect x="0.0000%" y="853" width="0.2244%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="863.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (22 samples, 0.22%)</title><rect x="0.0000%" y="837" width="0.2244%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="847.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (22 samples, 0.22%)</title><rect x="0.0000%" y="821" width="0.2244%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="831.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (22 samples, 0.22%)</title><rect x="0.0000%" y="805" width="0.2244%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="815.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (22 samples, 0.22%)</title><rect x="0.0000%" y="789" width="0.2244%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="799.50"></text></g><g><title>bai_finch::zeta::{{closure}} (22 samples, 0.22%)</title><rect x="0.0000%" y="773" width="0.2244%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="783.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (22 samples, 0.22%)</title><rect x="0.0000%" y="757" width="0.2244%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="767.50"></text></g><g><title>[[stack]] (1 samples, 0.01%)</title><rect x="0.2244%" y="997" width="0.0102%" height="15" fill="rgb(225,20,46)"/><text x="0.4744%" y="1007.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (1 samples, 0.01%)</title><rect x="0.2244%" y="981" width="0.0102%" height="15" fill="rgb(210,31,41)"/><text x="0.4744%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (64 samples, 0.65%)</title><rect x="0.2346%" y="981" width="0.6527%" height="15" fill="rgb(221,200,47)"/><text x="0.4846%" y="991.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (64 samples, 0.65%)</title><rect x="0.2346%" y="965" width="0.6527%" height="15" fill="rgb(226,26,5)"/><text x="0.4846%" y="975.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (64 samples, 0.65%)</title><rect x="0.2346%" y="949" width="0.6527%" height="15" fill="rgb(249,33,26)"/><text x="0.4846%" y="959.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (64 samples, 0.65%)</title><rect x="0.2346%" y="933" width="0.6527%" height="15" fill="rgb(235,183,28)"/><text x="0.4846%" y="943.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (64 samples, 0.65%)</title><rect x="0.2346%" y="917" width="0.6527%" height="15" fill="rgb(221,5,38)"/><text x="0.4846%" y="927.50"></text></g><g><title>bai_finch::fancy_f::{{closure}} (64 samples, 0.65%)</title><rect x="0.2346%" y="901" width="0.6527%" height="15" fill="rgb(247,18,42)"/><text x="0.4846%" y="911.50"></text></g><g><title>bai_finch::zeta (64 samples, 0.65%)</title><rect x="0.2346%" y="885" width="0.6527%" height="15" fill="rgb(241,131,45)"/><text x="0.4846%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (64 samples, 0.65%)</title><rect x="0.2346%" y="869" width="0.6527%" height="15" fill="rgb(249,31,29)"/><text x="0.4846%" y="879.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (64 samples, 0.65%)</title><rect x="0.2346%" y="853" width="0.6527%" height="15" fill="rgb(225,111,53)"/><text x="0.4846%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (64 samples, 0.65%)</title><rect x="0.2346%" y="837" width="0.6527%" height="15" fill="rgb(238,160,17)"/><text x="0.4846%" y="847.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (64 samples, 0.65%)</title><rect x="0.2346%" y="821" width="0.6527%" height="15" fill="rgb(214,148,48)"/><text x="0.4846%" y="831.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (64 samples, 0.65%)</title><rect x="0.2346%" y="805" width="0.6527%" height="15" fill="rgb(232,36,49)"/><text x="0.4846%" y="815.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (64 samples, 0.65%)</title><rect x="0.2346%" y="789" width="0.6527%" height="15" fill="rgb(209,103,24)"/><text x="0.4846%" y="799.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (64 samples, 0.65%)</title><rect x="0.2346%" y="773" width="0.6527%" height="15" fill="rgb(229,88,8)"/><text x="0.4846%" y="783.50"></text></g><g><title>bai_finch::zeta::{{closure}} (64 samples, 0.65%)</title><rect x="0.2346%" y="757" width="0.6527%" height="15" fill="rgb(213,181,19)"/><text x="0.4846%" y="767.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (64 samples, 0.65%)</title><rect x="0.2346%" y="741" width="0.6527%" height="15" fill="rgb(254,191,54)"/><text x="0.4846%" y="751.50"></text></g><g><title>[libm-2.33.so] (7 samples, 0.07%)</title><rect x="0.8872%" y="981" width="0.0714%" height="15" fill="rgb(241,83,37)"/><text x="1.1372%" y="991.50"></text></g><g><title>__hypot_finite (3 samples, 0.03%)</title><rect x="0.9586%" y="981" width="0.0306%" height="15" fill="rgb(233,36,39)"/><text x="1.2086%" y="991.50"></text></g><g><title>atan2f32x (3 samples, 0.03%)</title><rect x="0.9892%" y="981" width="0.0306%" height="15" fill="rgb(226,3,54)"/><text x="1.2392%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70 samples, 0.71%)</title><rect x="1.0198%" y="677" width="0.7138%" height="15" fill="rgb(245,192,40)"/><text x="1.2698%" y="687.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (166 samples, 1.69%)</title><rect x="1.7336%" y="677" width="1.6928%" height="15" fill="rgb(238,167,29)"/><text x="1.9836%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="4.3341%" y="661" width="0.0102%" height="15" fill="rgb(232,182,51)"/><text x="4.5841%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (9,187 samples, 93.69%)</title><rect x="1.0198%" y="789" width="93.6875%" height="15" fill="rgb(231,60,39)"/><text x="1.2698%" y="799.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (9,187 samples, 93.69%)</title><rect x="1.0198%" y="773" width="93.6875%" height="15" fill="rgb(208,69,12)"/><text x="1.2698%" y="783.50">&lt;f64 as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,187 samples, 93.69%)</title><rect x="1.0198%" y="757" width="93.6875%" height="15" fill="rgb(235,93,37)"/><text x="1.2698%" y="767.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (9,187 samples, 93.69%)</title><rect x="1.0198%" y="741" width="93.6875%" height="15" fill="rgb(213,116,39)"/><text x="1.2698%" y="751.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (9,187 samples, 93.69%)</title><rect x="1.0198%" y="725" width="93.6875%" height="15" fill="rgb(222,207,29)"/><text x="1.2698%" y="735.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (9,187 samples, 93.69%)</title><rect x="1.0198%" y="709" width="93.6875%" height="15" fill="rgb(206,96,30)"/><text x="1.2698%" y="719.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (9,187 samples, 93.69%)</title><rect x="1.0198%" y="693" width="93.6875%" height="15" fill="rgb(218,138,4)"/><text x="1.2698%" y="703.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>bai_finch::zeta::{{closure}} (8,951 samples, 91.28%)</title><rect x="3.4265%" y="677" width="91.2808%" height="15" fill="rgb(250,191,14)"/><text x="3.6765%" y="687.50">bai_finch::zeta::{{closure}}</text></g><g><title>std::f64::&lt;impl f64&gt;::powf (8,861 samples, 90.36%)</title><rect x="4.3443%" y="661" width="90.3630%" height="15" fill="rgb(239,60,40)"/><text x="4.5943%" y="671.50">std::f64::&lt;impl f64&gt;::powf</text></g><g><title>pow (8,834 samples, 90.09%)</title><rect x="4.6196%" y="645" width="90.0877%" height="15" fill="rgb(206,27,48)"/><text x="4.8696%" y="655.50">pow</text></g><g><title>[libm-2.33.so] (7,758 samples, 79.11%)</title><rect x="15.5925%" y="629" width="79.1148%" height="15" fill="rgb(225,35,8)"/><text x="15.8425%" y="639.50">[libm-2.33.so]</text></g><g><title>bai_finch::zeta (9,188 samples, 93.70%)</title><rect x="1.0198%" y="805" width="93.6977%" height="15" fill="rgb(250,213,24)"/><text x="1.2698%" y="815.50">bai_finch::zeta</text></g><g><title>std::f64::&lt;impl f64&gt;::powf (1 samples, 0.01%)</title><rect x="94.7073%" y="789" width="0.0102%" height="15" fill="rgb(247,123,22)"/><text x="94.9573%" y="799.50"></text></g><g><title>pow (1 samples, 0.01%)</title><rect x="94.7073%" y="773" width="0.0102%" height="15" fill="rgb(231,138,38)"/><text x="94.9573%" y="783.50"></text></g><g><title>[libm-2.33.so] (1 samples, 0.01%)</title><rect x="94.7073%" y="757" width="0.0102%" height="15" fill="rgb(231,145,46)"/><text x="94.9573%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="94.7175%" y="725" width="0.0102%" height="15" fill="rgb(251,118,11)"/><text x="94.9675%" y="735.50"></text></g><g><title>bai_finch::non_integral_choose (1 samples, 0.01%)</title><rect x="94.7277%" y="533" width="0.0102%" height="15" fill="rgb(217,147,25)"/><text x="94.9777%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::product (1 samples, 0.01%)</title><rect x="94.7277%" y="517" width="0.0102%" height="15" fill="rgb(247,81,37)"/><text x="94.9777%" y="527.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Product&gt;::product (1 samples, 0.01%)</title><rect x="94.7277%" y="501" width="0.0102%" height="15" fill="rgb(209,12,38)"/><text x="94.9777%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="94.7277%" y="485" width="0.0102%" height="15" fill="rgb(227,1,9)"/><text x="94.9777%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.01%)</title><rect x="94.7277%" y="469" width="0.0102%" height="15" fill="rgb(248,47,43)"/><text x="94.9777%" y="479.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.01%)</title><rect x="94.7277%" y="453" width="0.0102%" height="15" fill="rgb(221,10,30)"/><text x="94.9777%" y="463.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Product&gt;::product::{{closure}} (1 samples, 0.01%)</title><rect x="94.7277%" y="437" width="0.0102%" height="15" fill="rgb(210,229,1)"/><text x="94.9777%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="94.7379%" y="469" width="0.0102%" height="15" fill="rgb(222,148,37)"/><text x="94.9879%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="94.7481%" y="341" width="0.0204%" height="15" fill="rgb(234,67,33)"/><text x="94.9981%" y="351.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.01%)</title><rect x="94.7685%" y="293" width="0.0102%" height="15" fill="rgb(247,98,35)"/><text x="95.0185%" y="303.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (1 samples, 0.01%)</title><rect x="94.7685%" y="277" width="0.0102%" height="15" fill="rgb(247,138,52)"/><text x="95.0185%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1 samples, 0.01%)</title><rect x="94.7685%" y="261" width="0.0102%" height="15" fill="rgb(213,79,30)"/><text x="95.0185%" y="271.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.01%)</title><rect x="94.8195%" y="165" width="0.0102%" height="15" fill="rgb(246,177,23)"/><text x="95.0695%" y="175.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (1 samples, 0.01%)</title><rect x="94.8195%" y="149" width="0.0102%" height="15" fill="rgb(230,62,27)"/><text x="95.0695%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1 samples, 0.01%)</title><rect x="94.8195%" y="133" width="0.0102%" height="15" fill="rgb(216,154,8)"/><text x="95.0695%" y="143.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (5 samples, 0.05%)</title><rect x="95.0133%" y="133" width="0.0510%" height="15" fill="rgb(244,35,45)"/><text x="95.2633%" y="143.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (19 samples, 0.19%)</title><rect x="95.0133%" y="149" width="0.1938%" height="15" fill="rgb(251,115,12)"/><text x="95.2633%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (14 samples, 0.14%)</title><rect x="95.0642%" y="133" width="0.1428%" height="15" fill="rgb(240,54,50)"/><text x="95.3142%" y="143.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Product&gt;::product::{{closure}} (2 samples, 0.02%)</title><rect x="95.2070%" y="53" width="0.0204%" height="15" fill="rgb(233,84,52)"/><text x="95.4570%" y="63.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (8 samples, 0.08%)</title><rect x="95.2070%" y="69" width="0.0816%" height="15" fill="rgb(207,117,47)"/><text x="95.4570%" y="79.50"></text></g><g><title>bai_finch::integral_choose::{{closure}} (6 samples, 0.06%)</title><rect x="95.2274%" y="53" width="0.0612%" height="15" fill="rgb(249,43,39)"/><text x="95.4774%" y="63.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.03%)</title><rect x="95.2886%" y="69" width="0.0306%" height="15" fill="rgb(209,38,44)"/><text x="95.5386%" y="79.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.01%)</title><rect x="95.3090%" y="53" width="0.0102%" height="15" fill="rgb(236,212,23)"/><text x="95.5590%" y="63.50"></text></g><g><title>core::num::&lt;impl i32&gt;::unchecked_add (1 samples, 0.01%)</title><rect x="95.3090%" y="37" width="0.0102%" height="15" fill="rgb(242,79,21)"/><text x="95.5590%" y="47.50"></text></g><g><title>bai_finch::integral_choose (12 samples, 0.12%)</title><rect x="95.2070%" y="149" width="0.1224%" height="15" fill="rgb(211,96,35)"/><text x="95.4570%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::product (12 samples, 0.12%)</title><rect x="95.2070%" y="133" width="0.1224%" height="15" fill="rgb(253,215,40)"/><text x="95.4570%" y="143.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Product&gt;::product (12 samples, 0.12%)</title><rect x="95.2070%" y="117" width="0.1224%" height="15" fill="rgb(211,81,21)"/><text x="95.4570%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.12%)</title><rect x="95.2070%" y="101" width="0.1224%" height="15" fill="rgb(208,190,38)"/><text x="95.4570%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 0.12%)</title><rect x="95.2070%" y="85" width="0.1224%" height="15" fill="rgb(235,213,38)"/><text x="95.4570%" y="95.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (1 samples, 0.01%)</title><rect x="95.3192%" y="69" width="0.0102%" height="15" fill="rgb(237,122,38)"/><text x="95.5692%" y="79.50"></text></g><g><title>bai_finch::non_integral_choose (2 samples, 0.02%)</title><rect x="95.3294%" y="149" width="0.0204%" height="15" fill="rgb(244,218,35)"/><text x="95.5794%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i32&gt;::cmp (2 samples, 0.02%)</title><rect x="95.3294%" y="133" width="0.0204%" height="15" fill="rgb(240,68,47)"/><text x="95.5794%" y="143.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (2 samples, 0.02%)</title><rect x="95.3498%" y="149" width="0.0204%" height="15" fill="rgb(210,16,53)"/><text x="95.5998%" y="159.50"></text></g><g><title>num_complex::&lt;impl core::ops::arith::Mul&lt;num_complex::Complex&lt;f64&gt;&gt; for f64&gt;::mul (3 samples, 0.03%)</title><rect x="95.3702%" y="149" width="0.0306%" height="15" fill="rgb(235,124,12)"/><text x="95.6202%" y="159.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::powf (16 samples, 0.16%)</title><rect x="95.4008%" y="133" width="0.1632%" height="15" fill="rgb(224,169,11)"/><text x="95.6508%" y="143.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (16 samples, 0.16%)</title><rect x="95.4008%" y="117" width="0.1632%" height="15" fill="rgb(250,166,2)"/><text x="95.6508%" y="127.50"></text></g><g><title>pow (16 samples, 0.16%)</title><rect x="95.4008%" y="101" width="0.1632%" height="15" fill="rgb(242,216,29)"/><text x="95.6508%" y="111.50"></text></g><g><title>[libm-2.33.so] (14 samples, 0.14%)</title><rect x="95.4212%" y="85" width="0.1428%" height="15" fill="rgb(230,116,27)"/><text x="95.6712%" y="95.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (1 samples, 0.01%)</title><rect x="95.5639%" y="101" width="0.0102%" height="15" fill="rgb(228,99,48)"/><text x="95.8139%" y="111.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (33 samples, 0.34%)</title><rect x="95.5639%" y="133" width="0.3365%" height="15" fill="rgb(253,11,6)"/><text x="95.8139%" y="143.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (33 samples, 0.34%)</title><rect x="95.5639%" y="117" width="0.3365%" height="15" fill="rgb(247,143,39)"/><text x="95.8139%" y="127.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (32 samples, 0.33%)</title><rect x="95.5741%" y="101" width="0.3263%" height="15" fill="rgb(236,97,10)"/><text x="95.8241%" y="111.50"></text></g><g><title>sincosf32x (32 samples, 0.33%)</title><rect x="95.5741%" y="85" width="0.3263%" height="15" fill="rgb(233,208,19)"/><text x="95.8241%" y="95.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (1 samples, 0.01%)</title><rect x="95.9005%" y="85" width="0.0102%" height="15" fill="rgb(216,164,2)"/><text x="96.1505%" y="95.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::arg (30 samples, 0.31%)</title><rect x="95.9005%" y="117" width="0.3059%" height="15" fill="rgb(220,129,5)"/><text x="96.1505%" y="127.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::atan2 (30 samples, 0.31%)</title><rect x="95.9005%" y="101" width="0.3059%" height="15" fill="rgb(242,17,10)"/><text x="96.1505%" y="111.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::atan2 (29 samples, 0.30%)</title><rect x="95.9107%" y="85" width="0.2957%" height="15" fill="rgb(242,107,0)"/><text x="96.1607%" y="95.50"></text></g><g><title>atan2f32x (29 samples, 0.30%)</title><rect x="95.9107%" y="69" width="0.2957%" height="15" fill="rgb(251,28,31)"/><text x="96.1607%" y="79.50"></text></g><g><title>[libm-2.33.so] (25 samples, 0.25%)</title><rect x="95.9515%" y="53" width="0.2549%" height="15" fill="rgb(233,223,10)"/><text x="96.2015%" y="63.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (1 samples, 0.01%)</title><rect x="96.2064%" y="85" width="0.0102%" height="15" fill="rgb(215,21,27)"/><text x="96.4564%" y="95.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::powf (90 samples, 0.92%)</title><rect x="95.4008%" y="149" width="0.9178%" height="15" fill="rgb(232,23,21)"/><text x="95.6508%" y="159.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::to_polar (41 samples, 0.42%)</title><rect x="95.9005%" y="133" width="0.4181%" height="15" fill="rgb(244,5,23)"/><text x="96.1505%" y="143.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::norm (11 samples, 0.11%)</title><rect x="96.2064%" y="117" width="0.1122%" height="15" fill="rgb(226,81,46)"/><text x="96.4564%" y="127.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::hypot (11 samples, 0.11%)</title><rect x="96.2064%" y="101" width="0.1122%" height="15" fill="rgb(247,70,30)"/><text x="96.4564%" y="111.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::hypot (10 samples, 0.10%)</title><rect x="96.2166%" y="85" width="0.1020%" height="15" fill="rgb(212,68,19)"/><text x="96.4666%" y="95.50"></text></g><g><title>hypotf32x (10 samples, 0.10%)</title><rect x="96.2166%" y="69" width="0.1020%" height="15" fill="rgb(240,187,13)"/><text x="96.4666%" y="79.50"></text></g><g><title>__hypot_finite (8 samples, 0.08%)</title><rect x="96.2370%" y="53" width="0.0816%" height="15" fill="rgb(223,113,26)"/><text x="96.4870%" y="63.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (2 samples, 0.02%)</title><rect x="96.3390%" y="101" width="0.0204%" height="15" fill="rgb(206,192,2)"/><text x="96.5890%" y="111.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::inv (3 samples, 0.03%)</title><rect x="96.3390%" y="117" width="0.0306%" height="15" fill="rgb(241,108,4)"/><text x="96.5890%" y="127.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::norm_sqr (1 samples, 0.01%)</title><rect x="96.3594%" y="101" width="0.0102%" height="15" fill="rgb(247,173,49)"/><text x="96.6094%" y="111.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.01%)</title><rect x="96.3594%" y="85" width="0.0102%" height="15" fill="rgb(224,114,35)"/><text x="96.6094%" y="95.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::powi (3 samples, 0.03%)</title><rect x="96.3696%" y="117" width="0.0306%" height="15" fill="rgb(245,159,27)"/><text x="96.6196%" y="127.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1 samples, 0.01%)</title><rect x="96.4104%" y="85" width="0.0102%" height="15" fill="rgb(245,172,44)"/><text x="96.6604%" y="95.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.01%)</title><rect x="96.4206%" y="85" width="0.0102%" height="15" fill="rgb(236,23,11)"/><text x="96.6706%" y="95.50"></text></g><g><title>bai_finch::normal_f::{{closure}}::{{closure}}::{{closure}}::{{closure}} (158 samples, 1.61%)</title><rect x="94.8297%" y="165" width="1.6113%" height="15" fill="rgb(205,117,38)"/><text x="95.0797%" y="175.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::powi (12 samples, 0.12%)</title><rect x="96.3186%" y="149" width="0.1224%" height="15" fill="rgb(237,72,25)"/><text x="96.5686%" y="159.50"></text></g><g><title>num_complex::pow::&lt;impl num_traits::pow::Pow&lt;i32&gt; for &amp;num_complex::Complex&lt;T&gt;&gt;::pow (12 samples, 0.12%)</title><rect x="96.3186%" y="133" width="0.1224%" height="15" fill="rgb(244,70,9)"/><text x="96.5686%" y="143.50"></text></g><g><title>num_complex::pow::&lt;impl num_traits::pow::Pow&lt;u32&gt; for &amp;num_complex::Complex&lt;T&gt;&gt;::pow (4 samples, 0.04%)</title><rect x="96.4002%" y="117" width="0.0408%" height="15" fill="rgb(217,125,39)"/><text x="96.6502%" y="127.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (3 samples, 0.03%)</title><rect x="96.4104%" y="101" width="0.0306%" height="15" fill="rgb(235,36,10)"/><text x="96.6604%" y="111.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (1 samples, 0.01%)</title><rect x="96.4308%" y="85" width="0.0102%" height="15" fill="rgb(251,123,47)"/><text x="96.6808%" y="95.50"></text></g><g><title>bai_finch::fancy_f (9,358 samples, 95.43%)</title><rect x="1.0198%" y="949" width="95.4314%" height="15" fill="rgb(221,13,13)"/><text x="1.2698%" y="959.50">bai_finch::fancy_f</text></g><g><title>core::iter::traits::iterator::Iterator::sum (9,358 samples, 95.43%)</title><rect x="1.0198%" y="933" width="95.4314%" height="15" fill="rgb(238,131,9)"/><text x="1.2698%" y="943.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum (9,358 samples, 95.43%)</title><rect x="1.0198%" y="917" width="95.4314%" height="15" fill="rgb(211,50,8)"/><text x="1.2698%" y="927.50">&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,358 samples, 95.43%)</title><rect x="1.0198%" y="901" width="95.4314%" height="15" fill="rgb(245,182,24)"/><text x="1.2698%" y="911.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (9,358 samples, 95.43%)</title><rect x="1.0198%" y="885" width="95.4314%" height="15" fill="rgb(242,14,37)"/><text x="1.2698%" y="895.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (9,358 samples, 95.43%)</title><rect x="1.0198%" y="869" width="95.4314%" height="15" fill="rgb(246,228,12)"/><text x="1.2698%" y="879.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (9,358 samples, 95.43%)</title><rect x="1.0198%" y="853" width="95.4314%" height="15" fill="rgb(213,55,15)"/><text x="1.2698%" y="863.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (9,358 samples, 95.43%)</title><rect x="1.0198%" y="837" width="95.4314%" height="15" fill="rgb(209,9,3)"/><text x="1.2698%" y="847.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>bai_finch::fancy_f::{{closure}} (9,358 samples, 95.43%)</title><rect x="1.0198%" y="821" width="95.4314%" height="15" fill="rgb(230,59,30)"/><text x="1.2698%" y="831.50">bai_finch::fancy_f::{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::sum (170 samples, 1.73%)</title><rect x="94.7175%" y="805" width="1.7336%" height="15" fill="rgb(209,121,21)"/><text x="94.9675%" y="815.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum (170 samples, 1.73%)</title><rect x="94.7175%" y="789" width="1.7336%" height="15" fill="rgb(220,109,13)"/><text x="94.9675%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (170 samples, 1.73%)</title><rect x="94.7175%" y="773" width="1.7336%" height="15" fill="rgb(232,18,1)"/><text x="94.9675%" y="783.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (170 samples, 1.73%)</title><rect x="94.7175%" y="757" width="1.7336%" height="15" fill="rgb(215,41,42)"/><text x="94.9675%" y="767.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (170 samples, 1.73%)</title><rect x="94.7175%" y="741" width="1.7336%" height="15" fill="rgb(224,123,36)"/><text x="94.9675%" y="751.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (169 samples, 1.72%)</title><rect x="94.7277%" y="725" width="1.7234%" height="15" fill="rgb(240,125,3)"/><text x="94.9777%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (169 samples, 1.72%)</title><rect x="94.7277%" y="709" width="1.7234%" height="15" fill="rgb(205,98,50)"/><text x="94.9777%" y="719.50"></text></g><g><title>bai_finch::fancy_f::{{closure}}::{{closure}} (169 samples, 1.72%)</title><rect x="94.7277%" y="693" width="1.7234%" height="15" fill="rgb(205,185,37)"/><text x="94.9777%" y="703.50"></text></g><g><title>bai_finch::normal_f (169 samples, 1.72%)</title><rect x="94.7277%" y="677" width="1.7234%" height="15" fill="rgb(238,207,15)"/><text x="94.9777%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (169 samples, 1.72%)</title><rect x="94.7277%" y="661" width="1.7234%" height="15" fill="rgb(213,199,42)"/><text x="94.9777%" y="671.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum (169 samples, 1.72%)</title><rect x="94.7277%" y="645" width="1.7234%" height="15" fill="rgb(235,201,11)"/><text x="94.9777%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (169 samples, 1.72%)</title><rect x="94.7277%" y="629" width="1.7234%" height="15" fill="rgb(207,46,11)"/><text x="94.9777%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (169 samples, 1.72%)</title><rect x="94.7277%" y="613" width="1.7234%" height="15" fill="rgb(241,35,35)"/><text x="94.9777%" y="623.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (169 samples, 1.72%)</title><rect x="94.7277%" y="597" width="1.7234%" height="15" fill="rgb(243,32,47)"/><text x="94.9777%" y="607.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (169 samples, 1.72%)</title><rect x="94.7277%" y="581" width="1.7234%" height="15" fill="rgb(247,202,23)"/><text x="94.9777%" y="591.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (169 samples, 1.72%)</title><rect x="94.7277%" y="565" width="1.7234%" height="15" fill="rgb(219,102,11)"/><text x="94.9777%" y="575.50"></text></g><g><title>bai_finch::normal_f::{{closure}} (169 samples, 1.72%)</title><rect x="94.7277%" y="549" width="1.7234%" height="15" fill="rgb(243,110,44)"/><text x="94.9777%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (168 samples, 1.71%)</title><rect x="94.7379%" y="533" width="1.7132%" height="15" fill="rgb(222,74,54)"/><text x="94.9879%" y="543.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum (168 samples, 1.71%)</title><rect x="94.7379%" y="517" width="1.7132%" height="15" fill="rgb(216,99,12)"/><text x="94.9879%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (168 samples, 1.71%)</title><rect x="94.7379%" y="501" width="1.7132%" height="15" fill="rgb(226,22,26)"/><text x="94.9879%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (168 samples, 1.71%)</title><rect x="94.7379%" y="485" width="1.7132%" height="15" fill="rgb(217,163,10)"/><text x="94.9879%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (167 samples, 1.70%)</title><rect x="94.7481%" y="469" width="1.7030%" height="15" fill="rgb(213,25,53)"/><text x="94.9981%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (167 samples, 1.70%)</title><rect x="94.7481%" y="453" width="1.7030%" height="15" fill="rgb(252,105,26)"/><text x="94.9981%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (167 samples, 1.70%)</title><rect x="94.7481%" y="437" width="1.7030%" height="15" fill="rgb(220,39,43)"/><text x="94.9981%" y="447.50"></text></g><g><title>bai_finch::normal_f::{{closure}}::{{closure}} (167 samples, 1.70%)</title><rect x="94.7481%" y="421" width="1.7030%" height="15" fill="rgb(229,68,48)"/><text x="94.9981%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (167 samples, 1.70%)</title><rect x="94.7481%" y="405" width="1.7030%" height="15" fill="rgb(252,8,32)"/><text x="94.9981%" y="415.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum (167 samples, 1.70%)</title><rect x="94.7481%" y="389" width="1.7030%" height="15" fill="rgb(223,20,43)"/><text x="94.9981%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (167 samples, 1.70%)</title><rect x="94.7481%" y="373" width="1.7030%" height="15" fill="rgb(229,81,49)"/><text x="94.9981%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (167 samples, 1.70%)</title><rect x="94.7481%" y="357" width="1.7030%" height="15" fill="rgb(236,28,36)"/><text x="94.9981%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (165 samples, 1.68%)</title><rect x="94.7685%" y="341" width="1.6826%" height="15" fill="rgb(249,185,26)"/><text x="95.0185%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (165 samples, 1.68%)</title><rect x="94.7685%" y="325" width="1.6826%" height="15" fill="rgb(249,174,33)"/><text x="95.0185%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (165 samples, 1.68%)</title><rect x="94.7685%" y="309" width="1.6826%" height="15" fill="rgb(233,201,37)"/><text x="95.0185%" y="319.50"></text></g><g><title>bai_finch::normal_f::{{closure}}::{{closure}}::{{closure}} (164 samples, 1.67%)</title><rect x="94.7787%" y="293" width="1.6724%" height="15" fill="rgb(221,78,26)"/><text x="95.0287%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (164 samples, 1.67%)</title><rect x="94.7787%" y="277" width="1.6724%" height="15" fill="rgb(250,127,30)"/><text x="95.0287%" y="287.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum (164 samples, 1.67%)</title><rect x="94.7787%" y="261" width="1.6724%" height="15" fill="rgb(230,49,44)"/><text x="95.0287%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (164 samples, 1.67%)</title><rect x="94.7787%" y="245" width="1.6724%" height="15" fill="rgb(229,67,23)"/><text x="95.0287%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (164 samples, 1.67%)</title><rect x="94.7787%" y="229" width="1.6724%" height="15" fill="rgb(249,83,47)"/><text x="95.0287%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (162 samples, 1.65%)</title><rect x="94.7991%" y="213" width="1.6520%" height="15" fill="rgb(215,43,3)"/><text x="95.0491%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (161 samples, 1.64%)</title><rect x="94.8093%" y="197" width="1.6419%" height="15" fill="rgb(238,154,13)"/><text x="95.0593%" y="207.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (160 samples, 1.63%)</title><rect x="94.8195%" y="181" width="1.6317%" height="15" fill="rgb(219,56,2)"/><text x="95.0695%" y="191.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (1 samples, 0.01%)</title><rect x="96.4410%" y="165" width="0.0102%" height="15" fill="rgb(233,0,4)"/><text x="96.6910%" y="175.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (1 samples, 0.01%)</title><rect x="96.4614%" y="933" width="0.0102%" height="15" fill="rgb(235,30,7)"/><text x="96.7114%" y="943.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.01%)</title><rect x="96.4614%" y="917" width="0.0102%" height="15" fill="rgb(250,79,13)"/><text x="96.7114%" y="927.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (7 samples, 0.07%)</title><rect x="96.5021%" y="805" width="0.0714%" height="15" fill="rgb(211,146,34)"/><text x="96.7521%" y="815.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (7 samples, 0.07%)</title><rect x="96.5021%" y="789" width="0.0714%" height="15" fill="rgb(228,22,38)"/><text x="96.7521%" y="799.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (7 samples, 0.07%)</title><rect x="96.5021%" y="773" width="0.0714%" height="15" fill="rgb(235,168,5)"/><text x="96.7521%" y="783.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (7 samples, 0.07%)</title><rect x="96.6653%" y="773" width="0.0714%" height="15" fill="rgb(221,155,16)"/><text x="96.9153%" y="783.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (8 samples, 0.08%)</title><rect x="96.7367%" y="773" width="0.0816%" height="15" fill="rgb(215,215,53)"/><text x="96.9867%" y="783.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (18 samples, 0.18%)</title><rect x="96.6653%" y="789" width="0.1836%" height="15" fill="rgb(223,4,10)"/><text x="96.9153%" y="799.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (3 samples, 0.03%)</title><rect x="96.8183%" y="773" width="0.0306%" height="15" fill="rgb(234,103,6)"/><text x="97.0683%" y="783.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.01%)</title><rect x="96.8489%" y="709" width="0.0102%" height="15" fill="rgb(227,97,0)"/><text x="97.0989%" y="719.50"></text></g><g><title>bai_finch::integral_choose::{{closure}} (1 samples, 0.01%)</title><rect x="96.8489%" y="693" width="0.0102%" height="15" fill="rgb(234,150,53)"/><text x="97.0989%" y="703.50"></text></g><g><title>bai_finch::integral_choose (2 samples, 0.02%)</title><rect x="96.8489%" y="789" width="0.0204%" height="15" fill="rgb(228,201,54)"/><text x="97.0989%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::product (2 samples, 0.02%)</title><rect x="96.8489%" y="773" width="0.0204%" height="15" fill="rgb(222,22,37)"/><text x="97.0989%" y="783.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Product&gt;::product (2 samples, 0.02%)</title><rect x="96.8489%" y="757" width="0.0204%" height="15" fill="rgb(237,53,32)"/><text x="97.0989%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="96.8489%" y="741" width="0.0204%" height="15" fill="rgb(233,25,53)"/><text x="97.0989%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="96.8489%" y="725" width="0.0204%" height="15" fill="rgb(210,40,34)"/><text x="97.0989%" y="735.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="96.8591%" y="709" width="0.0102%" height="15" fill="rgb(241,220,44)"/><text x="97.1091%" y="719.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Product&gt;::product::{{closure}} (2 samples, 0.02%)</title><rect x="96.8795%" y="693" width="0.0204%" height="15" fill="rgb(235,28,35)"/><text x="97.1295%" y="703.50"></text></g><g><title>bai_finch::non_integral_choose (10 samples, 0.10%)</title><rect x="96.8693%" y="789" width="0.1020%" height="15" fill="rgb(210,56,17)"/><text x="97.1193%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::product (9 samples, 0.09%)</title><rect x="96.8795%" y="773" width="0.0918%" height="15" fill="rgb(224,130,29)"/><text x="97.1295%" y="783.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Product&gt;::product (9 samples, 0.09%)</title><rect x="96.8795%" y="757" width="0.0918%" height="15" fill="rgb(235,212,8)"/><text x="97.1295%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.09%)</title><rect x="96.8795%" y="741" width="0.0918%" height="15" fill="rgb(223,33,50)"/><text x="97.1295%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.09%)</title><rect x="96.8795%" y="725" width="0.0918%" height="15" fill="rgb(219,149,13)"/><text x="97.1295%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (9 samples, 0.09%)</title><rect x="96.8795%" y="709" width="0.0918%" height="15" fill="rgb(250,156,29)"/><text x="97.1295%" y="719.50"></text></g><g><title>bai_finch::non_integral_choose::{{closure}} (7 samples, 0.07%)</title><rect x="96.8999%" y="693" width="0.0714%" height="15" fill="rgb(216,193,19)"/><text x="97.1499%" y="703.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (2 samples, 0.02%)</title><rect x="96.9712%" y="789" width="0.0204%" height="15" fill="rgb(216,135,14)"/><text x="97.2212%" y="799.50"></text></g><g><title>num_complex::&lt;impl core::ops::arith::Mul&lt;num_complex::Complex&lt;f64&gt;&gt; for f64&gt;::mul (2 samples, 0.02%)</title><rect x="96.9916%" y="789" width="0.0204%" height="15" fill="rgb(241,47,5)"/><text x="97.2416%" y="799.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::powf (42 samples, 0.43%)</title><rect x="97.0120%" y="773" width="0.4283%" height="15" fill="rgb(233,42,35)"/><text x="97.2620%" y="783.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (42 samples, 0.43%)</title><rect x="97.0120%" y="757" width="0.4283%" height="15" fill="rgb(231,13,6)"/><text x="97.2620%" y="767.50"></text></g><g><title>pow (41 samples, 0.42%)</title><rect x="97.0222%" y="741" width="0.4181%" height="15" fill="rgb(207,181,40)"/><text x="97.2722%" y="751.50"></text></g><g><title>[libm-2.33.so] (36 samples, 0.37%)</title><rect x="97.0732%" y="725" width="0.3671%" height="15" fill="rgb(254,173,49)"/><text x="97.3232%" y="735.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (2 samples, 0.02%)</title><rect x="97.4403%" y="773" width="0.0204%" height="15" fill="rgb(221,1,38)"/><text x="97.6903%" y="783.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (56 samples, 0.57%)</title><rect x="97.4607%" y="773" width="0.5711%" height="15" fill="rgb(206,124,46)"/><text x="97.7107%" y="783.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (56 samples, 0.57%)</title><rect x="97.4607%" y="757" width="0.5711%" height="15" fill="rgb(249,21,11)"/><text x="97.7107%" y="767.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (56 samples, 0.57%)</title><rect x="97.4607%" y="741" width="0.5711%" height="15" fill="rgb(222,201,40)"/><text x="97.7107%" y="751.50"></text></g><g><title>sincosf32x (56 samples, 0.57%)</title><rect x="97.4607%" y="725" width="0.5711%" height="15" fill="rgb(235,61,29)"/><text x="97.7107%" y="735.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::arg (57 samples, 0.58%)</title><rect x="98.0318%" y="757" width="0.5813%" height="15" fill="rgb(219,207,3)"/><text x="98.2818%" y="767.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::atan2 (57 samples, 0.58%)</title><rect x="98.0318%" y="741" width="0.5813%" height="15" fill="rgb(222,56,46)"/><text x="98.2818%" y="751.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::atan2 (57 samples, 0.58%)</title><rect x="98.0318%" y="725" width="0.5813%" height="15" fill="rgb(239,76,54)"/><text x="98.2818%" y="735.50"></text></g><g><title>atan2f32x (57 samples, 0.58%)</title><rect x="98.0318%" y="709" width="0.5813%" height="15" fill="rgb(231,124,27)"/><text x="98.2818%" y="719.50"></text></g><g><title>[libm-2.33.so] (55 samples, 0.56%)</title><rect x="98.0522%" y="693" width="0.5609%" height="15" fill="rgb(249,195,6)"/><text x="98.3022%" y="703.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::powf (166 samples, 1.69%)</title><rect x="97.0120%" y="789" width="1.6928%" height="15" fill="rgb(237,174,47)"/><text x="97.2620%" y="799.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::to_polar (66 samples, 0.67%)</title><rect x="98.0318%" y="773" width="0.6731%" height="15" fill="rgb(206,201,31)"/><text x="98.2818%" y="783.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::norm (9 samples, 0.09%)</title><rect x="98.6131%" y="757" width="0.0918%" height="15" fill="rgb(231,57,52)"/><text x="98.8631%" y="767.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::hypot (9 samples, 0.09%)</title><rect x="98.6131%" y="741" width="0.0918%" height="15" fill="rgb(248,177,22)"/><text x="98.8631%" y="751.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::hypot (9 samples, 0.09%)</title><rect x="98.6131%" y="725" width="0.0918%" height="15" fill="rgb(215,211,37)"/><text x="98.8631%" y="735.50"></text></g><g><title>hypotf32x (9 samples, 0.09%)</title><rect x="98.6131%" y="709" width="0.0918%" height="15" fill="rgb(241,128,51)"/><text x="98.8631%" y="719.50"></text></g><g><title>__hypot_finite (7 samples, 0.07%)</title><rect x="98.6335%" y="693" width="0.0714%" height="15" fill="rgb(227,165,31)"/><text x="98.8835%" y="703.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::powi (1 samples, 0.01%)</title><rect x="98.7049%" y="757" width="0.0102%" height="15" fill="rgb(228,167,24)"/><text x="98.9549%" y="767.50"></text></g><g><title>bai_finch::normal_m::{{closure}} (215 samples, 2.19%)</title><rect x="96.5735%" y="805" width="2.1925%" height="15" fill="rgb(228,143,12)"/><text x="96.8235%" y="815.50">b..</text></g><g><title>num_complex::Complex&lt;T&gt;::powi (6 samples, 0.06%)</title><rect x="98.7049%" y="789" width="0.0612%" height="15" fill="rgb(249,149,8)"/><text x="98.9549%" y="799.50"></text></g><g><title>num_complex::pow::&lt;impl num_traits::pow::Pow&lt;i32&gt; for &amp;num_complex::Complex&lt;T&gt;&gt;::pow (6 samples, 0.06%)</title><rect x="98.7049%" y="773" width="0.0612%" height="15" fill="rgb(243,35,44)"/><text x="98.9549%" y="783.50"></text></g><g><title>num_complex::pow::&lt;impl num_traits::pow::Pow&lt;u32&gt; for &amp;num_complex::Complex&lt;T&gt;&gt;::pow (5 samples, 0.05%)</title><rect x="98.7151%" y="757" width="0.0510%" height="15" fill="rgb(246,89,9)"/><text x="98.9651%" y="767.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (1 samples, 0.01%)</title><rect x="98.7559%" y="741" width="0.0102%" height="15" fill="rgb(233,213,13)"/><text x="99.0059%" y="751.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (1 samples, 0.01%)</title><rect x="98.7559%" y="725" width="0.0102%" height="15" fill="rgb(233,141,41)"/><text x="99.0059%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (225 samples, 2.29%)</title><rect x="96.4817%" y="917" width="2.2945%" height="15" fill="rgb(239,167,4)"/><text x="96.7317%" y="927.50">c..</text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&gt;::sum (225 samples, 2.29%)</title><rect x="96.4817%" y="901" width="2.2945%" height="15" fill="rgb(209,217,16)"/><text x="96.7317%" y="911.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (225 samples, 2.29%)</title><rect x="96.4817%" y="885" width="2.2945%" height="15" fill="rgb(219,88,35)"/><text x="96.7317%" y="895.50">&lt;..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (225 samples, 2.29%)</title><rect x="96.4817%" y="869" width="2.2945%" height="15" fill="rgb(220,193,23)"/><text x="96.7317%" y="879.50">c..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (225 samples, 2.29%)</title><rect x="96.4817%" y="853" width="2.2945%" height="15" fill="rgb(230,90,52)"/><text x="96.7317%" y="863.50">c..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (225 samples, 2.29%)</title><rect x="96.4817%" y="837" width="2.2945%" height="15" fill="rgb(252,106,19)"/><text x="96.7317%" y="847.50">c..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (223 samples, 2.27%)</title><rect x="96.5021%" y="821" width="2.2741%" height="15" fill="rgb(206,74,20)"/><text x="96.7521%" y="831.50">c..</text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::_{{closure}} (1 samples, 0.01%)</title><rect x="98.7661%" y="805" width="0.0102%" height="15" fill="rgb(230,138,44)"/><text x="99.0161%" y="815.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.01%)</title><rect x="98.7763%" y="789" width="0.0102%" height="15" fill="rgb(235,182,43)"/><text x="99.0263%" y="799.50"></text></g><g><title>nalgebra::base::blas::array_axc (2 samples, 0.02%)</title><rect x="98.7763%" y="821" width="0.0204%" height="15" fill="rgb(242,16,51)"/><text x="99.0263%" y="831.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (2 samples, 0.02%)</title><rect x="98.7763%" y="805" width="0.0204%" height="15" fill="rgb(248,9,4)"/><text x="99.0263%" y="815.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (1 samples, 0.01%)</title><rect x="98.7865%" y="789" width="0.0102%" height="15" fill="rgb(210,31,22)"/><text x="99.0365%" y="799.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.01%)</title><rect x="98.7967%" y="789" width="0.0102%" height="15" fill="rgb(239,54,39)"/><text x="99.0467%" y="799.50"></text></g><g><title>bai_finch::normal_m (231 samples, 2.36%)</title><rect x="96.4715%" y="933" width="2.3557%" height="15" fill="rgb(230,99,41)"/><text x="96.7215%" y="943.50">b..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (5 samples, 0.05%)</title><rect x="98.7763%" y="917" width="0.0510%" height="15" fill="rgb(253,106,12)"/><text x="99.0263%" y="927.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (5 samples, 0.05%)</title><rect x="98.7763%" y="901" width="0.0510%" height="15" fill="rgb(213,46,41)"/><text x="99.0263%" y="911.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul_to (5 samples, 0.05%)</title><rect x="98.7763%" y="885" width="0.0510%" height="15" fill="rgb(215,133,35)"/><text x="99.0263%" y="895.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gemm (5 samples, 0.05%)</title><rect x="98.7763%" y="869" width="0.0510%" height="15" fill="rgb(213,28,5)"/><text x="99.0263%" y="879.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (5 samples, 0.05%)</title><rect x="98.7763%" y="853" width="0.0510%" height="15" fill="rgb(215,77,49)"/><text x="99.0263%" y="863.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (5 samples, 0.05%)</title><rect x="98.7763%" y="837" width="0.0510%" height="15" fill="rgb(248,100,22)"/><text x="99.0263%" y="847.50"></text></g><g><title>nalgebra::base::blas::array_axcpy (3 samples, 0.03%)</title><rect x="98.7967%" y="821" width="0.0306%" height="15" fill="rgb(208,67,9)"/><text x="99.0467%" y="831.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (3 samples, 0.03%)</title><rect x="98.7967%" y="805" width="0.0306%" height="15" fill="rgb(219,133,21)"/><text x="99.0467%" y="815.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (2 samples, 0.02%)</title><rect x="98.8069%" y="789" width="0.0204%" height="15" fill="rgb(246,46,29)"/><text x="99.0569%" y="799.50"></text></g><g><title>bai_finch::lambda (9,592 samples, 97.82%)</title><rect x="1.0198%" y="981" width="97.8177%" height="15" fill="rgb(246,185,52)"/><text x="1.2698%" y="991.50">bai_finch::lambda</text></g><g><title>bai_finch::fancy_l (9,592 samples, 97.82%)</title><rect x="1.0198%" y="965" width="97.8177%" height="15" fill="rgb(252,136,11)"/><text x="1.2698%" y="975.50">bai_finch::fancy_l</text></g><g><title>bai_finch::fancy_m (234 samples, 2.39%)</title><rect x="96.4512%" y="949" width="2.3863%" height="15" fill="rgb(219,138,53)"/><text x="96.7012%" y="959.50">ba..</text></g><g><title>num_complex::opassign::&lt;impl core::ops::arith::AddAssign for num_complex::Complex&lt;T&gt;&gt;::add_assign (1 samples, 0.01%)</title><rect x="98.8272%" y="933" width="0.0102%" height="15" fill="rgb(211,51,23)"/><text x="99.0772%" y="943.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.01%)</title><rect x="98.8272%" y="917" width="0.0102%" height="15" fill="rgb(247,221,28)"/><text x="99.0772%" y="927.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (3 samples, 0.03%)</title><rect x="98.8374%" y="981" width="0.0306%" height="15" fill="rgb(251,222,45)"/><text x="99.0874%" y="991.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3 samples, 0.03%)</title><rect x="98.8374%" y="965" width="0.0306%" height="15" fill="rgb(217,162,53)"/><text x="99.0874%" y="975.50"></text></g><g><title>bai_finch::normal_m::{{closure}} (3 samples, 0.03%)</title><rect x="98.8374%" y="949" width="0.0306%" height="15" fill="rgb(229,93,14)"/><text x="99.0874%" y="959.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::powf (1 samples, 0.01%)</title><rect x="98.8578%" y="933" width="0.0102%" height="15" fill="rgb(209,67,49)"/><text x="99.1078%" y="943.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::to_polar (1 samples, 0.01%)</title><rect x="98.8578%" y="917" width="0.0102%" height="15" fill="rgb(213,87,29)"/><text x="99.1078%" y="927.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::norm (1 samples, 0.01%)</title><rect x="98.8578%" y="901" width="0.0102%" height="15" fill="rgb(205,151,52)"/><text x="99.1078%" y="911.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::hypot (1 samples, 0.01%)</title><rect x="98.8578%" y="885" width="0.0102%" height="15" fill="rgb(253,215,39)"/><text x="99.1078%" y="895.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::hypot (1 samples, 0.01%)</title><rect x="98.8578%" y="869" width="0.0102%" height="15" fill="rgb(221,220,41)"/><text x="99.1078%" y="879.50"></text></g><g><title>hypotf32x (1 samples, 0.01%)</title><rect x="98.8680%" y="981" width="0.0102%" height="15" fill="rgb(218,133,21)"/><text x="99.1180%" y="991.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::powi (4 samples, 0.04%)</title><rect x="98.8782%" y="981" width="0.0408%" height="15" fill="rgb(221,193,43)"/><text x="99.1282%" y="991.50"></text></g><g><title>pow (97 samples, 0.99%)</title><rect x="98.9190%" y="981" width="0.9892%" height="15" fill="rgb(240,128,52)"/><text x="99.1690%" y="991.50"></text></g><g><title>[unknown] (9,777 samples, 99.70%)</title><rect x="0.2346%" y="997" width="99.7043%" height="15" fill="rgb(253,114,12)"/><text x="0.4846%" y="1007.50">[unknown]</text></g><g><title>sincosf32x (3 samples, 0.03%)</title><rect x="99.9082%" y="981" width="0.0306%" height="15" fill="rgb(215,223,47)"/><text x="100.1582%" y="991.50"></text></g><g><title>all (9,806 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(248,225,23)"/><text x="0.2500%" y="1039.50"></text></g><g><title>bai_finch (9,806 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(250,108,0)"/><text x="0.2500%" y="1023.50">bai_finch</text></g><g><title>_start (6 samples, 0.06%)</title><rect x="99.9388%" y="997" width="0.0612%" height="15" fill="rgb(228,208,7)"/><text x="100.1888%" y="1007.50"></text></g><g><title>_dl_start (1 samples, 0.01%)</title><rect x="99.9898%" y="981" width="0.0102%" height="15" fill="rgb(244,45,10)"/><text x="100.2398%" y="991.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.01%)</title><rect x="99.9898%" y="965" width="0.0102%" height="15" fill="rgb(207,125,25)"/><text x="100.2398%" y="975.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.01%)</title><rect x="99.9898%" y="949" width="0.0102%" height="15" fill="rgb(210,195,18)"/><text x="100.2398%" y="959.50"></text></g></svg></svg>